{{- if .Values.pihole.deployment.ingressRoute.enabled }}
  {{- if .Values.pihole.deployment.ingressRoute.className }}
    {{- if not (hasKey .Values.pihole.deployment.ingressRoute.annotations "kubernetes.io/ingress.class") }}
    {{- $_ := set .Values.pihole.deployment.ingressRoute.annotations "kubernetes.io/ingress.class" .Values.pihole.deployment.ingressRoute.ingressClassName }}
    {{- end }}
  {{- end }}
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ include "pihole.ingressRouteName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pihole.labels" . | nindent 4 }}
  {{- with .Values.pihole.deployment.ingressRoute.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  entryPoints:
    {{- include "pihole.validateValue" list .Values.pihole.deployment.ingressRoute.entryPoints "Error - Ingress entrypoint is not provided." -}}
    {{- range .Values.pihole.deployment.ingressRoute.entryPoints }}
    - {{ . }}
    {{- end }}
  routes:
    - match: {{ include "pihole.ingressHost" . }}
      kind: Rule
      services:
        - name: {{ include "pihole.adminServiceName" . }}
          namespace: {{ .Release.Namespace }}
          port: 80
  {{- if and (not (empty .Values.pihole.deployment.ingressRoute.domain.cert.issuer.name)) (not (empty .Values.pihole.deployment.ingressRoute.domain.cert.issuer.type)) }}
  tls:
    secretName: {{ include "pihole.domainCertSecretName" . }}
  {{- end }}
{{- end }}
